<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>对ES6-proxy的理解</title>
      <link href="/2020/01/05/%E5%AF%B9ES6-proxy%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2020/01/05/%E5%AF%B9ES6-proxy%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="对ES6-proxy的理解"><a href="#对ES6-proxy的理解" class="headerlink" title="对ES6-proxy的理解"></a>对ES6-proxy的理解</h1><blockquote><p>ES6(ECMAScript2015) 是 <code>JavaScript</code> 一个版本标准，作为前端爱好者是必须要掌握的，本篇记录我对ES6中，<code>proxy</code> 的理解。</p></blockquote><h2 id="字面理解"><a href="#字面理解" class="headerlink" title="字面理解"></a>字面理解</h2><p><code>Proxy</code> 在英语中是代理的意思，那我们就引发了几个疑问：</p><ol><li>它代理了什么？</li><li>为什么要代理？</li><li>如何使用代理？</li></ol><p>首先我们引用阮老师的 <code>《ECMAScript 6 入门》</code> 书籍中的概述：</p><blockquote><p>Proxy 可以理解成，在<strong>目标对象</strong>之前架设一层“拦截器”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p></blockquote><p>那么通过阮老师的这句话，我们可以得出第一个问题的答案：</p><p><strong>它代理了对象</strong></p><h2 id="为什么要代理"><a href="#为什么要代理" class="headerlink" title="为什么要代理"></a>为什么要代理</h2><p>第二个问题是为什么要使用 <code>proxy</code>？我总结了以下几点：</p><ul><li>拦截和监视外部对象的访问</li><li>降低函数或类的复杂度</li><li>在复杂操作前对操作进行校验或对所需资源进行管理</li></ul><p>先来一个不使用 <code>proxy</code> 的栗子：</p><pre><code class="js">let user = {    name: &#39;John&#39;,    surname: &#39;Doe&#39;};let printUser = (property) =&gt; {    let value = user[property];    if (!value) {        throw new Error(`The property [${property}] does not exist`);    } else {        console.log(`The user ${property} is ${value}`);    }}printUser(&#39;name&#39;); // 输出: &#39;The user name is John&#39;printUser(&#39;email&#39;); // 抛出错误: The property [email] does not exist</code></pre><p>这是一个简单的例子，我们有一个带有几个属性的用户对象，如果属性存在，我们想要打印用户信息，如果不存在，则抛出异常。通过上面的代码，你会发现：将条件和异常移到其他地方，而 <code>printUser</code> 中仅关注显示用户信息的实际逻辑会更好。这是我们可以使用代理对象的地方，让我们更新下这个例子。</p><pre><code class="javascript">let user = {    name: &#39;John&#39;,    surname: &#39;Doe&#39;};let proxy = new Proxy(user, {    get(target, property) {        let value = target[property];        if (!value) {            throw new Error(`The property [${property}] does not exist`);        }        return value;    }});let printUser = (property) =&gt; {    console.log(`The user ${property} is ${proxy[property]}`);};printUser(&#39;name&#39;); // 输出： &#39;The user name is John&#39;printUser(&#39;email&#39;); // 抛出错误: The property [email] does not exist</code></pre><p>在上面的示例中，我们包装了 <code>user</code> 对象，并设置了一个 <code>get</code> 方法。此方法充当拦截器，在返回值之前，会首先对属性值进行检查，如果不存在，则抛出异常。</p><p>输出与第一种情况相同，但此时 <code>printUser</code> 函数专注于逻辑，只处理消息。</p><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p>proxy除了代理get，set操作，还能代理其他的操作，如下：</p><pre><code class="js">handler.getPrototypeOf()// 在读取代理对象的原型时触发该操作，比如在执行 Object.getPrototypeOf(proxy) 时。handler.setPrototypeOf()// 在设置代理对象的原型时触发该操作，比如在执行 Object.setPrototypeOf(proxy, null) 时。handler.isExtensible()// 在判断一个代理对象是否是可扩展时触发该操作，比如在执行 Object.isExtensible(proxy) 时。handler.preventExtensions()// 在让一个代理对象不可扩展时触发该操作，比如在执行 Object.preventExtensions(proxy) 时。handler.getOwnPropertyDescriptor()// 在获取代理对象某个属性的属性描述时触发该操作，比如在执行 Object.getOwnPropertyDescriptor(proxy, &quot;foo&quot;) 时。handler.defineProperty()// 在定义代理对象某个属性时的属性描述时触发该操作，比如在执行 Object.defineProperty(proxy, &quot;foo&quot;, {}) 时。handler.has()// 在判断代理对象是否拥有某个属性时触发该操作，比如在执行 &quot;foo&quot; in proxy 时。handler.get()// 在读取代理对象的某个属性时触发该操作，比如在执行 proxy.foo 时。handler.set()// 在给代理对象的某个属性赋值时触发该操作，比如在执行 proxy.foo = 1 时。handler.deleteProperty()// 在删除代理对象的某个属性时触发该操作，比如在执行 delete proxy.foo 时。handler.ownKeys()// 在获取代理对象的所有属性键时触发该操作，比如在执行 Object.getOwnPropertyNames(proxy) 时。handler.apply()// 在调用一个目标对象为函数的代理对象时触发该操作，比如在执行 proxy() 时。handler.construct()// 在给一个目标对象为构造函数的代理对象构造实例时触发该操作，比如在执行new proxy() 时。</code></pre><h2 id="proxy栗子"><a href="#proxy栗子" class="headerlink" title="proxy栗子"></a>proxy栗子</h2><p>通过属性查找数组中的特定对象</p><p>以下代理为数组扩展了一些实用工具，可一看到，你可以灵活地“定义”属性，而不需要使用 <code>Object.defineProperties</code> 方法。</p><pre><code class="javascript">let products = new Proxy([  { name: &#39;Firefox&#39;, type: &#39;browser&#39; },  { name: &#39;SeaMonkey&#39;, type: &#39;browser&#39; },  { name: &#39;Thunderbird&#39;, type: &#39;mailer&#39; }],{  get: function(obj, prop) {    // 缺省行为是返回属性值， prop ?通常是一个整数    if (prop in obj) {      return obj[prop];    }    // 获取 products 的 number; 它是 products.length 的别名    if (prop === &#39;number&#39;) {      return obj.length;    }    let result, types = {};    for (let product of obj) {      if (product.name === prop) {        result = product;      }      if (types[product.type]) {        types[product.type].push(product);      } else {        types[product.type] = [product];      }    }    // 通过 name 获取 product    if (result) {      return result;    }    // 通过 type 获取 products    if (prop in types) {      return types[prop];    }    // 获取 product type    if (prop === &#39;types&#39;) {      return Object.keys(types);    }    return undefined;  }});console.log(products[0]); // { name: &#39;Firefox&#39;, type: &#39;browser&#39; }console.log(products[&#39;Firefox&#39;]); // { name: &#39;Firefox&#39;, type: &#39;browser&#39; }console.log(products[&#39;Chrome&#39;]); // undefinedconsole.log(products.browser); // [{ name: &#39;Firefox&#39;, type: &#39;browser&#39; }, { name: &#39;SeaMonkey&#39;, type: &#39;browser&#39; }]console.log(products.types); // [&#39;browser&#39;, &#39;mailer&#39;]console.log(products.number); // 3</code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li>MDN官网对 <code>proxy</code> 的解释： <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener" title="mdn官网对proxy解释">链接地址</a></li><li>阮老师 《ECMAScript 6 入门》 对 <code>proxy</code> 的解释： <a href="http://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noopener" title="阮老师 《ECMAScript 6 入门》对proxy解释">链接地址</a></li><li>【译】Proxy及其优势：<a href="https://segmentfault.com/a/1190000019982184" target="_blank" rel="noopener">链接地址</a></li><li>Proxy 的巧用：<a href="https://juejin.im/post/5d2e657ae51d4510b71da69d#heading-0" target="_blank" rel="noopener">链接地址</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo+Github搭建你的个人博客</title>
      <link href="/2019/12/31/%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/12/31/%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Hexo-Github搭建你的个人博客"><a href="#使用Hexo-Github搭建你的个人博客" class="headerlink" title="使用Hexo+Github搭建你的个人博客"></a>使用Hexo+Github搭建你的个人博客</h1><blockquote><p>作为一个合格的程序员，当然要有一个输入自己的博客，这不仅是学习很好的方法，也是面试中很能加分的一项！(PS:还阔以装😁)</p><blockquote><p>本篇文章介绍我是如何使用 <code>Hexo</code> + <code>Github</code> 来搭建我的博客。</p></blockquote></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><a href="https://github.com/" target="_blank" rel="noopener" title="Github地址">Gtihub</a> 账户我相信大家应该都用把，并且都会一些简单的操作；鉴于 <code>Gtihub</code> 是国外的服务器，有时候可能会因为网络的延迟造成加载很缓慢，也可以使用国内的 <a href="https://gitee.com/" target="_blank" rel="noopener" title="Gitee地址">Gitee</a> 或者 <a href="https://coding.net/" target="_blank" rel="noopener" title="Coding地址">Coding</a>。</li><li>安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener" title="Git下载地址">Git</a>，Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。</li><li>本机要有 <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener" title="node下载地址">node</a> 环境。这个我相信做前端开发的，搭建vue项目等等操作，都是需要 <code>node</code>的支持。</li><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener" title="Hexo中文文档地址">Hexo</a> 的文章使用 <code>Markdown</code> 文件，建议没有看过简单写法的可以先去学习以下。</li></ul><blockquote><p>以上为基础操作，就不具体介绍了，如果有疑问可以在<a href="https://windows99.github.io/whoami/" title="首页关于我的界面">关于</a>菜单找到我的联系方式，或者百度谷歌。</p></blockquote><h2 id="创建-Github-仓库"><a href="#创建-Github-仓库" class="headerlink" title="创建 Github 仓库"></a>创建 Github 仓库</h2><ol><li>点击左边的按钮或者右上方+号，弹出下拉框，选择第一个。</li></ol><p>   <img src="http://pic.wsktop.com/images/2019/12/31/1.png" alt="创建仓库1"></p><ol start="2"><li>在第一个输入框仓库名要写成 你GitHub的用户名+ <code>.github.io</code>，这里我已经拥有了这个仓库，所以会报出一个错误！箭头指向的按钮要点击勾选，初始化仓库。</li></ol><p>   <img src="http://pic.wsktop.com/images/2019/12/31/2.png" alt="创建仓库2"></p><ol start="3"><li>创建完后会进入你的仓库，在工具栏找到 <code>Settings</code>，下滑找到 <code>Github Pages</code>，如下图：</li></ol><p>   <img src="http://pic.wsktop.com/images/2019/12/31/3.png" alt="选择GitHub Pages"></p><p>在 <code>Source</code> 下的下拉框，选中第一个选项，等一会，在上方就会有一个地址，可以通过这个地址访问你的博客。到这里仓库就算是创建完成了！</p><h2 id="本地搭建-Hexo"><a href="#本地搭建-Hexo" class="headerlink" title="本地搭建 Hexo"></a>本地搭建 Hexo</h2><p> Hexo就是我们的个人博客网站的框架 ，首先可以找到空白文件夹，安装好 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener" title="Git下载地址">Git</a> 可以右击，点击 git bash，打开git命令行（或者window下使用cmd命令行）输入：</p><pre><code class="bash">npm install hexo-cli -g //  或者yarn add hexo-cli -g</code></pre><p>这个安装可能时间会有些长，耐心等待。如果在国内可以使用<a href="https://npm.taobao.org/" target="_blank" rel="noopener" title="淘宝NPM镜像地址">淘宝NPM镜像</a>。</p><p>安装完后，初始化我们的博客，输入：</p><pre><code class="bash">hexo init blog</code></pre><p>初始化完成后，进入文件夹，并安装依赖</p><pre><code class="bash">cd blognpm install //  或者yarn</code></pre><p>最后我们启动 <code>hexo</code> 服务：</p><pre><code class="bash">hexo server</code></pre><p>浏览器进入 <a href="http://localhost:4000/" target="_blank" rel="noopener" title="本地hexo服务地址">http://localhost:4000/</a>，可以看到 <code>hexo</code> 给我们的初始界面。到这里，我们本地就算是搭建好了，更多 <code>hexo</code>的配置和方法，请参考 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener" title="Hexo中文文档">官网</a></p><h2 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h2><p>首先我们需要配置好站点配置文件，在hexo根目录下有一个 <code>_config.yml</code> 的文件，在themes文件夹，里面也有个 <code>_config.yml</code> 文件，这个被称为<strong>主题配置文件</strong>，这里我们打开站点配置文件。</p><p>翻到最后修改为：</p><pre><code class="yaml">deploy:  type: git  repo: [你的github仓库地址]  branch: [分支]  message: [提交信息]</code></pre><p>其实就是给 <code>hexo deploy</code> 这个命令做相应的配置，需要在根目录安装Git部署插件：</p><pre><code class="bash">npm install hexo-deployer-git --save//  或者yarn add hexo-deployer-git --save</code></pre><p>这时，我们输入：</p><pre><code class="bash">hexo clean &amp; hexo generatehexo deploy</code></pre><p>输入我们的GitHub账户密码，就与服务器相关联了！</p><p>md文件格式我会抽时间补一篇文章。hexo的编写建立大家先去查看 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener" title="Hexo中文文档地址">官网</a>，已经很详细了！本文只是做个记录。最后在2019年最后一天，祝大家2020年新年快乐！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/30/hello-world/"/>
      <url>/2019/12/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 表格 </tag>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
